from typing import Optional

from rank_llm.data import Result
from rank_llm.rerank.listwise import RankListwiseOSLLM


class RankKReranker(RankListwiseOSLLM):
    def __init__(
        self,
        model: str = "hltcoe/Rank-K-32B",
        context_size: int = 4096,
        prompt_template_path: Optional[
            str
        ] = "src/rank_llm/rerank/prompt_templates/rank_k_template.yaml",
        num_few_shot_examples: int = 0,
        device: str = "cuda",
        num_gpus: int = 1,
        variable_passages: bool = True,
        window_size: int = 20,
        use_alpha: bool = False,
    ) -> None:
        super().__init__(
            model=model,
            context_size=context_size,
            prompt_template_path=prompt_template_path,
            num_few_shot_examples=num_few_shot_examples,
            device=device,
            num_gpus=num_gpus,
            variable_passages=variable_passages,
            is_thinking=True,
            reasoning_token_budget=8000,
            window_size=window_size,
            use_alpha=use_alpha,
        )

    def receive_permutation(
        self,
        result: Result,
        permutation: str,
        rank_start: int,
        rank_end: int,
        logging: bool = False,
    ) -> Result:
        """
        Processes and applies a permutation to the ranking results.

        This function takes a permutation string, representing the new order of items,
        and applies it to a subset of the ranking results. It adjusts the ranks and scores in the
        'result' object based on this permutation.

        Args:
            result (Result): The result object containing the initial ranking results.
            permutation (str): A string representing the new order of items.
                            Each item in the string should correspond to a rank in the results.
            rank_start (int): The starting index of the range in the results to which the permutation is applied.
            rank_end (int): The ending index of the range in the results to which the permutation is applied.

        Returns:
            Result: The updated result object with the new ranking order applied.

        Note:
            This function assumes that the permutation string has reasoning generated by Rank-K-32B preceding
            the sequence of integers separated by spaces.
            The function would take the last line of input, and call receive_permutation function from
            the superclass.
        """

        # Remove all the reasoning, and take only the order
        permutation = permutation.strip().split("\n")[-1]
        return super().receive_permutation(
            result, permutation, rank_start, rank_end, logging
        )
